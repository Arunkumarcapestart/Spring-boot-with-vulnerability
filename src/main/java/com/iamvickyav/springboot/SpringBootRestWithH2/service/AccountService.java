package com.iamvickyav.springboot.SpringBootRestWithH2.service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.sql.DataSource;

import com.iamvickyav.springboot.SpringBootRestWithH2.model.Account;
import com.iamvickyav.springboot.SpringBootRestWithH2.model.AccountDTO;
import org.springframework.stereotype.Component;

/**
 * @author Philippe
 *
 */
@Component
public class AccountService {

    private final DataSource dataSource;
    private final EntityManager em;

    public AccountService(DataSource dataSource, EntityManager em) {
        this.dataSource = dataSource;
        this.em = em;
    }


    /**
     * Return all accounts owned by a given customer,given his/her external id
     *
     * @param accountDTO
     * @return
     */
    public List<AccountDTO> createCustomer(AccountDTO accountDTO) {

        String sql = "insert into Accounts(customer_id,acc_number,branch_id,balance) values ('" + accountDTO.getCustomerId() + "','" + accountDTO.getAccNumber()  + "','" + accountDTO.getBranchId() + "'," + accountDTO.getBalance() + " )";


        try (Connection c = dataSource.getConnection();
             Statement stmt = c.createStatement();){
            int id = stmt.executeUpdate(sql);
            String getsSql = "select " + "customer_id,acc_number,branch_id,balance from Accounts where customer_id = '" + accountDTO.getCustomerId() + "'";

            ResultSet rs = stmt.executeQuery(getsSql);
            List<AccountDTO> accounts = new ArrayList<>();
            while (rs.next()) {
                AccountDTO acc = AccountDTO.builder()
                        .customerId(rs.getString("customer_id"))
                        .branchId(rs.getString("branch_id"))
                        .accNumber(rs.getString("acc_number"))
                        .balance(rs.getBigDecimal("balance"))
                        .build();

                accounts.add(acc);
            }

            return accounts;

        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }

    }

    /**
     * Return all accounts owned by a given customer,given his/her external id
     * 
     * @param customerId
     * @return
     */
    public List<AccountDTO> unsafeFindAccountsByCustomerId(String customerId) {

        String sql = "select " + "customer_id,acc_number,branch_id,balance from Accounts where customer_id = '" + customerId + "'";

        try (Connection c = dataSource.getConnection();
            ResultSet rs = c.createStatement()
                .executeQuery(sql)) {
            List<AccountDTO> accounts = new ArrayList<>();
            while (rs.next()) {
                AccountDTO acc = AccountDTO.builder()
                    .customerId(rs.getString("customer_id"))
                    .branchId(rs.getString("branch_id"))
                    .accNumber(rs.getString("acc_number"))
                    .balance(rs.getBigDecimal("balance"))
                    .build();

                accounts.add(acc);
            }

            return accounts;
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    /**
     * Return all accounts owned by a given customer,given his/her external id - JPA version
     * 
     * @param customerId
     * @return
     */
    public List<AccountDTO> unsafeJpaFindAccountsByCustomerId(String customerId) {
        String jql = "from Account where customerId = '" + customerId + "'";
        TypedQuery<Account> q = em.createQuery(jql, Account.class);
        return q.getResultList()
            .stream()
            .map(a -> AccountDTO.builder()
                .accNumber(a.getAccNumber())
                .balance(a.getBalance())
                .branchId(a.getAccNumber())
                .customerId(a.getCustomerId())
                .build())
            .collect(Collectors.toList());
    }
}
